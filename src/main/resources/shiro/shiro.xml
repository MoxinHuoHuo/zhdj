<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context-4.0.xsd"
    default-lazy-init="true">
    <description>Shiro Configuration</description>
    <!-- <bean id="accessControllerFilter" class="com.zeng.ezsh.filter.ShiroInterceptor" /> -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- 装配 securityManager -->  
	    <property name="securityManager" ref="securityManager"/>  
	    <!-- 配置登陆页面 -->  
	    <property name="loginUrl" value="/adminLg/toLogin"/>  
	    <!-- 登陆成功后的一面 -->  
	    <!-- <property name="successUrl" value="/main/main.jsp"/> -->
	    <!-- 未授权跳转界面 -->  
	    <!-- <property name="unauthorizedUrl" value="/jsp/unauthorized.jsp"/>  -->
	    <!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截.  -->  
	    <property name="filterChainDefinitions">  
		    <value>  
		          <!-- /index.jsp=anon  
		          /jsp/success.jsp=anon  
		          /jsp/fail.jsp=anon  
		          /jsp/user.jsp = roles[user]  
		          /jsp/admin.jsp = roles[admin]  
		          /logout = logout -->
		          <!-- /**=accessControllerFilter  -->
		    </value>  
	    </property>
	    <!-- <property name="filters">
            <map>
                <entry key="accessControllerFilter" value-ref="accessControllerFilter" />
            </map>
        </property>  -->  
    </bean>  

<!-- 配置使用自定义认证器，可以实现多Realm认证，并且可以指定特定Realm处理特定类型的验证 -->
    <bean id="authenticator" class="com.zeng.zhdj.shiro.action.CustomizedModularRealmAuthenticator">
        <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
    </bean>
	<!-- 配置缓存管理器 -->  
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
	<!-- 指定 ehcache 的配置文件 -->   
	     <property name="cacheManagerConfigFile" value="classpath:shiro/ehcache-shiro.xml"/>   
	</bean> 
	 
	<!-- 
	<bean id="myRealm" class="com.zeng.zhdj.shiro.action.ShiroAuthorizingRealmAction">
		 启用身份验证缓存，即缓存AuthenticationInfo信息，默认false
        <property name="authenticationCachingEnabled" value="true"/>
       	 缓存AuthenticationInfo信息的缓存名称 
        <property name="authenticationCacheName" value="authenticationCache"/>
       	 缓存AuthorizationInfo信息的缓存名称 
        <property name="authorizationCacheName" value="authorizationCache"/>
	</bean> 
	-->
	

	<!-- 配置 Shiro 的 SecurityManager Bean -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
		<property name="cacheManager" ref="cacheManager"/> 
		<property name="authenticator" ref="authenticator"></property>
        <!-- 可以配置多个Realm，其实会把realms属性赋值给ModularRealmAuthenticator的realms属性 -->
        <property name="realms">
            <list>
                <ref bean="FlowRealm" />
                <ref bean="RelUserRealm"/>
            </list>
        </property>  
		<!--  <property name="realm" ref="myRealm"/>   -->
		<!-- <property name="sessionMode" value="native"> 启动后不使用shiro session
		</property>  --> 
	</bean>  
	
	<!-- 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	<!-- 配置Realm -->
    <bean id="RelUserRealm" class="com.zeng.zhdj.shiro.action.UserRealm">
        <!--   启用身份验证缓存，即缓存AuthenticationInfo信息，默认false-->
        <property name="authenticationCachingEnabled" value="true"/>
       	 <!-- 缓存AuthenticationInfo信息的缓存名称  -->
        <property name="authenticationCacheName" value="authenticationCache"/>
       	 <!--缓存AuthorizationInfo信息的缓存名称--> 
    </bean>

    <bean id="FlowRealm" class="com.zeng.zhdj.shiro.action.FlowRealm">
       
        <!--   启用身份验证缓存，即缓存AuthenticationInfo信息，默认false-->
        <property name="authenticationCachingEnabled" value="true"/>
       	 <!-- 缓存AuthenticationInfo信息的缓存名称  -->
        <property name="authenticationCacheName" value="authenticationCache"/>
       	 <!--缓存AuthorizationInfo信息的缓存名称--> 
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
	<!-- AOP式方法级权限检查  -->
    <!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean> -->
</beans>